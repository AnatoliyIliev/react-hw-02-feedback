{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","className","styles","button","type","onClick","shortid","generate","Section","props","title","children","Notification","message","App","state","leaveFeedback","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAYeA,EAXI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,uDAA0BC,EAA1B,W,gCCSOC,EAZS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpB,8BACKD,EAAQE,KAAI,SAACC,GAAD,OACT,yBACAC,UAAWC,IAAOC,OAClBC,KAAK,SAELC,QAAS,kBAAMP,EAAgBE,IAJ/B,cAI0CA,IADrCM,IAAQC,kBCJVC,EANC,SAACC,GAAD,OACZ,qCACI,6BAAKA,EAAMC,QACX,8BAAMD,EAAME,eCCLC,EAJM,SAACH,GAAD,OACjB,4BAAKA,EAAMI,WCwDAC,E,4MAnDbC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPuB,cAAgB,SAAChB,GACf,EAAKiB,UAAS,iCACTjB,EAAS,EAAKe,MAAMf,GAAU,O,EAKrCkB,mBAAqB,WACnB,MAA+B,EAAKH,MACpC,OADA,EAAQxB,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzB0B,gCAAkC,WAC9B,IAAQ5B,EAAS,EAAKwB,MAAdxB,KAER,OADiB6B,KAAKC,MAAQ9B,EAAO,EAAK2B,qBAAwB,M,4CAMtE,WACE,MAA+BI,KAAKP,MAA5BxB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACnB,OACI,gCACE,cAAC,EAAD,CAASiB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEb,QAAS0B,OAAOC,KAAKF,KAAKP,OAC1BjB,gBAAiBwB,KAAKN,kBAE5B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGY,KAAKJ,qBAAuB,EAC1B,cAAC,EAAD,CACC3B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO4B,KAAKJ,qBACZvB,mBAAoB2B,KAAKH,oCACxB,cAAC,EAAD,CAAcN,QAAQ,+B,GA7CvBY,a,YCElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.dfd379f3.chunk.js","sourcesContent":["\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\n    <ul>       \n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive percentage: {positivePercentage}%</li>\n    </ul>    \n)\n\n\nexport default Statistics;","// import PropTypes from 'prop-types';\nimport styles from '../FeedbackOptions/FeedbackOptions.module.scss'\nimport shortid from 'shortid';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n    <div>\n        {options.map((option) => (\n            <button\n            className={styles.button}\n            type=\"button\"\n            key={shortid.generate()}\n            onClick={() => onLeaveFeedback(option)}> {option}</button>\n        ))} \n    </div>\n)\n\nexport default FeedbackOptions;","const Section = (props) => (\n    <>\n        <h1>{props.title}</h1>\n        <div>{props.children}</div>\n    </>\n)\nexport default Section;\n\n\n\n\n\n","const Notification = (props) => (\n    <p>{ props.message }</p>\n)\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  leaveFeedback = (option) => {\n    this.setState(() => ({        \n        [option]: this.state[option] + 1,\n      })\n    )\n  }  \n    \n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return(    \n     good + neutral + bad)\n    };   \n\n  countPositiveFeedbackPercentage = () => {\n      const { good } = this.state;\n      let percentage = Math.floor(( good / this.countTotalFeedback()) * 100);  \n      return percentage;\n  };\n\n  \n      \n  render() {\n    const { good, neutral, bad } = this.state;\n        return (\n            <div>\n              <Section title=\"Please leave feedback\">\n                <FeedbackOptions\n                  options={Object.keys(this.state)}\n                  onLeaveFeedback={this.leaveFeedback} />\n            </Section>            \n            <Section title=\"Statistics\">              \n              {this.countTotalFeedback() > 0 ? \n                (<Statistics\n                  good={good}\n                  neutral={neutral}\n                  bad={bad}\n                  total={this.countTotalFeedback()}\n                  positivePercentage={this.countPositiveFeedbackPercentage()} />) : \n                  (<Notification message=\"No feedback given\"/>)}\n              </Section>\n            </div>\n        ) \n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport '../src/styles.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}